install.packages('Biocmanager')
install.packages('BiocManager')
BiocManager::install('clusterProfiler')
library('clusterProfiler')
library('clusterProfiler')
if(!require(multtest))install.packages("multtest")
if(!require(multtest))install.packages("multtest")
if(!require(Seurat))install.packages("Seurat")
if(!require(Seurat))install.packages("Seurat")
if(!require(multtest))install.packages("multtest")
if(!require(dplyr))install.packages("dplyr")
if(!require(mindr))install.packages("mindr")
if(!require(mindr))install.packages("mindr")
if(!require(mindr))install.packages("tidyverse")
install.packages('mindr')
if(!require(multtest))install.packages("multtest")
if(!require(multtest))install.packages("multtest")
install.packages('installr')
library(installr)
updateR()
R --version
version
updateR()
if(!require(multtest))BiocManager::install('multtest')
if(!require(multtest))BiocManager::install('multtest')
install.packages('ggplot2')
install.packages("cocor")
install.packages('cocor')
install.packages('ggplot2')
.libPaths()
.libPaths("C:/Users/zhenyu luo/AppData/Local/R/win-library/4.4")
install.packages('cocor')
.libPaths()
.libPaths("C:/Program Files/R/R-4.4.0/library")
install.packages('cocor')
install.packages('cocor')
install.packages('cocor')
install.packages('cocor')
?head
##########################
# 关键流程总结​​
# ​​数据转换​​：Seurat → Monocle
# ​​质量控制​​：基因/细胞过滤 + 标准化
# ​​聚类分析​​：t-SNE + 密度聚类
# ​​轨迹构建​​：DDRTree降维 + 拟时序排序
# ​​基因挖掘​​：差异基因 + 拟时序关联基因
# ​​最终目标​​：解析细胞分化轨迹及调控该过程的基因动态。
##########################
library(Seurat)
##########################
# 关键流程总结​​
# ​​数据转换​​：Seurat → Monocle
# ​​质量控制​​：基因/细胞过滤 + 标准化
# ​​聚类分析​​：t-SNE + 密度聚类
# ​​轨迹构建​​：DDRTree降维 + 拟时序排序
# ​​基因挖掘​​：差异基因 + 拟时序关联基因
# ​​最终目标​​：解析细胞分化轨迹及调控该过程的基因动态。
##########################
library(Seurat)
#Seurat data convert to monocle data
library(monocle)
BiocManager::install('HSMMSingleCell')
options(timeout = 1600)
BiocManager::install('HSMMSingleCell')
#Seurat data convert to monocle data
library(monocle)
install.packages('slam')
#Seurat data convert to monocle data
library(monocle)
install.packages('combinat')
#Seurat data convert to monocle data
library(monocle)
install.packages('fastICA')
#Seurat data convert to monocle data
library(monocle)
## 2， 载入TwoSampleMR包
library(TwoSampleMR)
## 2， 载入TwoSampleMR包
library(TwoSampleMR)
## 3，从数据库中提取暴露的GWAS summary数据
exposure_dat = extract_instruments("ieu-a-2")
# https://api.opengwas.io/profile/
Sys.setenv(OPENGWAS_JWT="eyJhbGciOiJSUzI1NiIsImtpZCI6ImFwaS1qd3QiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhcGkub3Blbmd3YXMuaW8iLCJhdWQiOiJhcGkub3Blbmd3YXMuaW8iLCJzdWIiOiIxMDE4OTU0MDg3QHFxLmNvbSIsImlhdCI6MTc1ODY3NzI4OSwiZXhwIjoxNzU5ODg2ODg5fQ.ne6KD2_-kH-Zy70_6_l9N-GjqMKKZ1ytX4YE12CeR4Dq8sMFFCxP3c_6oyU1-2ToJzwNws_zh0up0_IPb2EwuH2YMo3f2YonefdlrH3Nd_KHIFSjxcFWs62hl9LDGdSf0LjZYhbsgvE7EHgT09fX3o6FWyvpPeJFYhqCeRTZvnrMpA37QvPUI84AnlHedGh0IEptgLLRPEPEt4x_MK8zIDLnfAKomI7E_Yi2wksTEAiOdB6hXkMf_katWjKt0qvB23Stj7l2iI21leMMpg3xxH0KtlDYXYGYslY7XS9qGxeE4zvSS07ZgJYUhCnRirZsGGjNQjA5e_bBK99j0GQHvg")
## 3，从数据库中提取暴露的GWAS summary数据
exposure_dat = extract_instruments("ieu-a-2")
dim(exposure_dat)
View(exposure_dat)
setwd('D:\\01_study\\001_md\\bioinformation')
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
dim(outcome_dat)
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
# https://api.opengwas.io/profile/  生成token
Sys.setenv(OPENGWAS_JWT="eyJhbGciOiJSUzI1NiIsImtpZCI6ImFwaS1qd3QiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhcGkub3Blbmd3YXMuaW8iLCJhdWQiOiJhcGkub3Blbmd3YXMuaW8iLCJzdWIiOiIxMDE4OTU0MDg3QHFxLmNvbSIsImlhdCI6MTc1ODY3NzI4OSwiZXhwIjoxNzU5ODg2ODg5fQ.ne6KD2_-kH-Zy70_6_l9N-GjqMKKZ1ytX4YE12CeR4Dq8sMFFCxP3c_6oyU1-2ToJzwNws_zh0up0_IPb2EwuH2YMo3f2YonefdlrH3Nd_KHIFSjxcFWs62hl9LDGdSf0LjZYhbsgvE7EHgT09fX3o6FWyvpPeJFYhqCeRTZvnrMpA37QvPUI84AnlHedGh0IEptgLLRPEPEt4x_MK8zIDLnfAKomI7E_Yi2wksTEAiOdB6hXkMf_katWjKt0qvB23Stj7l2iI21leMMpg3xxH0KtlDYXYGYslY7XS9qGxeE4zvSS07ZgJYUhCnRirZsGGjNQjA5e_bBK99j0GQHvg")
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
View(exposure_dat)
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-7")
dim(outcome_dat)
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
outcome_dat = extract_outcome_data(snps=exposure_dat$SNP, outcomes = "ieu-a-2")
dim(outcome_dat)
## 4，从数据库中提取结局变量的的GWAS summary数据，SNP用暴露数据的结果
# Get effects of instruments on outcome
# 暴露因素
# Body mass index         ieu-a-2
# Hypertension            finn-b-I9_HYPTENS
exposure_data <- mv_extract_exposures(c("ieu-a-2", "finn-b-I9_HYPTENS"),
pval_threshold = 1e-10,
# 有了令牌，运行的优先级相对较高，加了这一项不容易超时报错
opengwas_jwt = ieugwasr::get_opengwas_jwt())
# 暴露因素
# Body mass index         ieu-a-2
# Hypertension            finn-b-I9_HYPTENS
exposure_data <- mv_extract_exposures(c("ieu-a-2", "finn-b-I9_HYPTENS"),
pval_threshold = 1e-10,
# 有了令牌，运行的优先级相对较高，加了这一项不容易超时报错
opengwas_jwt = ieugwasr::get_opengwas_jwt())
dim(exposure_data)
# 结局因素
# Coronary heart disease ieu-a-7
outcome_data <- extract_outcome_data(exposure_data$SNP,
"ieu-a-7")
dim(outcome_data)
# 效应等位与效应量保持统一
mvdata <- mv_harmonise_data(exposure_data,
outcome_data,
harmonise_strictness = 2)
View(mvdata)
# 效应等位与效应量保持统一
mvdata <- mv_harmonise_data(exposure_data,
outcome_data,
harmonise_strictness = 2)
#进行MVMR的分析 （IVW）
res <- mv_multiple(mvdata)
result_table <- res$result
result_or <- generate_odds_ratios(result_table)
View(result_table)
View(result_or)
# 也可以使用 MVMR 进行操作，使用到工具变量与结局数据的效应值（β）矩阵以及标准误：
F.data <- format_mvmr(BXGs = mvdata[["exposure_beta"]],
BYG = mvdata[["outcome_beta"]],
seBXGs = mvdata[["exposure_se"]],
seBYG = mvdata[["outcome_se"]],
RSID = rownames(mvdata[["exposure_beta"]]))
# IVW 因果效应估计
remotes::install_github("WSpiller/MVMR"
）
# IVW 因果效应估计
remotes::install_github("WSpiller/MVMR")
# IVW 因果效应估计
# remotes::install_github("WSpiller/MVMR")
library(MVMR)
ivw_mvmr_res <- ivw_mvmr(F.data)
# 也可以使用 MVMR 进行操作，使用到工具变量与结局数据的效应值（β）矩阵以及标准误：
F.data <- format_mvmr(BXGs = mvdata[["exposure_beta"]],
BYG = mvdata[["outcome_beta"]],
seBXGs = mvdata[["exposure_se"]],
seBYG = mvdata[["outcome_se"]],
RSID = rownames(mvdata[["exposure_beta"]]))
# IVW 因果效应估计
ivw_mvmr_res <- ivw_mvmr(F.data)
# 计算F值
F_z <- strength_mvmr(r_input = F.data, gencov = 0)
# 异质性检验
pres <- pleiotropy_mvmr(r_input = F.data, gencov = 0)
View(F_z)
View(F.data)
View(pres)
pres
# 创建整合数据框
presso_data <- data.frame(
HTN_beta = mvdata[["exposure_beta"]][, "finn-b-I9_HYPTENS"],
HTN_se = mvdata[["exposure_se"]][, "finn-b-I9_HYPTENS"],
BMI_beta = mvdata[["exposure_beta"]][, "ieu-a-2"],
BMI_se = mvdata[["exposure_se"]][, "ieu-a-2"],
CHD_beta = mvdata[["outcome_beta"]],
CHD_se = mvdata[["outcome_se"]]
)
mr_presso_result <- mr_presso(
BetaOutcome = "CHD_beta",
BetaExposure = c("HTN_beta", "BMI_beta"),
SdOutcome = "CHD_se",
SdExposure = c("HTN_se", "BMI_se"),
OUTLIERtest = TRUE,
DISTORTIONtest = TRUE,
data = presso_data,
NbDistribution = 10000,
SignifThreshold = 0.01
)
devtools::install_github("rondolab/MR-PRESSO")
if (!require("devtools")) install.packages("devtools")
devtools::install_github("rondolab/MR-PRESSO")
# 使用 remotes 或 devtools 包从 GitHub 安装 MR-PRESSO，并强制重新安装
remotes::install_github("rondolab/MR-PRESSO", force = TRUE)
mr_presso_result <- mr_presso(
BetaOutcome = "CHD_beta",
BetaExposure = c("HTN_beta", "BMI_beta"),
SdOutcome = "CHD_se",
SdExposure = c("HTN_se", "BMI_se"),
OUTLIERtest = TRUE,
DISTORTIONtest = TRUE,
data = presso_data,
NbDistribution = 10000,
SignifThreshold = 0.01
)
# 使用 remotes 或 devtools 包从 GitHub 安装 MR-PRESSO，并强制重新安装
# remotes::install_github("rondolab/MR-PRESSO", force = TRUE)
library(MR-PRESSO)
# 使用 remotes 或 devtools 包从 GitHub 安装 MR-PRESSO，并强制重新安装
# remotes::install_github("rondolab/MR-PRESSO", force = TRUE)
library("MR-PRESSO")
# 使用 remotes 或 devtools 包从 GitHub 安装 MR-PRESSO，并强制重新安装
# remotes::install_github("rondolab/MR-PRESSO", force = TRUE)
library("MRPRESSO")
mr_presso_result <- mr_presso(
BetaOutcome = "CHD_beta",
BetaExposure = c("HTN_beta", "BMI_beta"),
SdOutcome = "CHD_se",
SdExposure = c("HTN_se", "BMI_se"),
OUTLIERtest = TRUE,
DISTORTIONtest = TRUE,
data = presso_data,
NbDistribution = 10000,
SignifThreshold = 0.01
)
mr_presso_result[['Main MR results']]
mr_presso_result <- mr_presso(
BetaOutcome = "CHD_beta",
BetaExposure = c("HTN_beta", "BMI_beta"),
SdOutcome = "CHD_se",
SdExposure = c("HTN_se", "BMI_se"),
OUTLIERtest = TRUE,
DISTORTIONtest = TRUE,
data = presso_data,
NbDistribution = 10000,
SignifThreshold = 0.01
)
mr_presso_result[['Main MR results']]
mr_presso_result[['MR-PREsso results']][['Global Test']]
mr_presso_result[['MR-PREsso results']][['Distortion Test']]
mr_presso_result[["MR-PREsso results"]]
mr_presso_result[["MR-PREsso results"]][['Global Test']]
MRMVInputObject <- mr_mvinput(bx = mvdata[["exposure_beta"]],
bxse = mvdata[["exposure_se"]],
by = mvdata[["outcome_beta"]],
byse = mvdata[["outcome_se"]],
snps = rownames(mvdata[["exposure_beta"]]))
# 效应等位与效应量保持统一
dat = harmonise_data(exposure_data, outcome_data)
dim(dat)
## 6，进行孟德尔随机化分析
res = mr(dat)
## 7，异质化分析
mr_heterogeneity(dat)
## 8，水平多效性分析
mr_pleiotropy_test(dat)
## 9，留一法分析
res_loo = mr_leaveoneout(dat)
mr_leaveoneout_plot(res_loo)
p1 = mr_scatter_plot(res, dat)
p1
## 11，森林图
res_single = mr_singlesnp(dat)
mr_forest_plot(res_single)
## 12，漏斗图
mr_funnel_plot(res_single)
# 四种核心图表
mr_scatter_plot(res, dat)      # 散点图
mr_forest_plot(res_single)     # 森林图
mr_funnel_plot(res_single)     # 漏斗图
mr_leaveoneout_plot(res_loo)   # 留一法图
# 四种核心图表
mr_scatter_plot(res, dat)      # 散点图
# 四种核心图表
mr_scatter_plot(res, dat)      # 散点图
mr_forest_plot(res_single)     # 森林图
mr_funnel_plot(res_single)     # 漏斗图
mr_leaveoneout_plot(res_loo)   # 留一法图
